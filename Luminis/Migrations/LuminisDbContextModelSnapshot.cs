// <auto-generated />
using System;
using Luminis.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Luminis.Migrations
{
    [DbContext(typeof(LuminisDbContext))]
    partial class LuminisDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EspecialidadePsicologo", b =>
                {
                    b.Property<int>("EspecialidadesId")
                        .HasColumnType("int");

                    b.Property<int>("PsicologosId")
                        .HasColumnType("int");

                    b.HasKey("EspecialidadesId", "PsicologosId");

                    b.HasIndex("PsicologosId");

                    b.ToTable("PsicologoEspecialidades", (string)null);
                });

            modelBuilder.Entity("Luminis.Models.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Terapia Cognitivo-Comportamental (TCC)"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Psicanálise"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Terapia Humanista"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Gestalt-terapia"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Terapia Sistêmica"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Psicologia Positiva"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Neuropsicologia"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Psicologia Organizacional"
                        },
                        new
                        {
                            Id = 9,
                            Nome = "Psicologia Escolar"
                        },
                        new
                        {
                            Id = 10,
                            Nome = "Psicologia Hospitalar"
                        },
                        new
                        {
                            Id = 11,
                            Nome = "Psicologia do Esporte"
                        },
                        new
                        {
                            Id = 12,
                            Nome = "Psicologia Jurídica"
                        },
                        new
                        {
                            Id = 13,
                            Nome = "Psicologia Social"
                        },
                        new
                        {
                            Id = 14,
                            Nome = "Orientação Profissional"
                        },
                        new
                        {
                            Id = 15,
                            Nome = "Terapia de Casal e Família"
                        },
                        new
                        {
                            Id = 16,
                            Nome = "Psicopedagogia"
                        },
                        new
                        {
                            Id = 17,
                            Nome = "Saúde Mental Perinatal"
                        });
                });

            modelBuilder.Entity("Luminis.Models.Psicologo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Biografia")
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("CRP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmDestaque")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SenhaHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WhatsApp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsAppUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Psicologos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Biografia = "Olá, sou o Dr. Teste, psicólogo com experiência em TCC.",
                            CPF = "000.000.000-00",
                            CRP = "01/12345",
                            DataCadastro = new DateTime(2025, 9, 17, 20, 41, 44, 710, DateTimeKind.Local).AddTicks(1608),
                            DataNascimento = new DateTime(1985, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmDestaque = false,
                            Email = "psicologo@teste.com",
                            FotoUrl = "https://placehold.co/400x400/87CEFA/000000?text=PSICÓLOGO+TESTE",
                            Nome = "Dr.",
                            Sobrenome = "Teste",
                            WhatsApp = "5599999999999",
                            WhatsAppUrl = "https://wa.me/5599999999999"
                        });
                });

            modelBuilder.Entity("Luminis.Models.PsicologoEspecialidade", b =>
                {
                    b.Property<int>("PsicologosId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("EspecialidadesId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("PsicologosId", "EspecialidadesId");

                    b.ToTable("PsicologoEspecialidade");

                    b.HasData(
                        new
                        {
                            PsicologosId = 1,
                            EspecialidadesId = 1
                        },
                        new
                        {
                            PsicologosId = 1,
                            EspecialidadesId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a18c66e9-0260-466d-a789-21800f123456",
                            ConcurrencyStamp = "9c32b6d7-b90b-490a-8728-e26e551407f4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b18c66e9-0260-466d-a789-21800f123457",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "418d9b3e-9c2c-40a0-9867-acaf3fcf8c6d",
                            Email = "admin@luminis.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LUMINIS.COM",
                            NormalizedUserName = "ADMIN@LUMINIS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPlZQPVirtX6rrTvpjOvzlpfWFDA1HQAlJrfzrNpKeq2w1zPy1zzQrYc7TpMM+52rQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "668e6936-3d19-4e48-869f-9778b867ffbf",
                            TwoFactorEnabled = false,
                            UserName = "admin@luminis.com"
                        },
                        new
                        {
                            Id = "c18c66e9-0260-466d-a789-21800f123458",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b7687da-ac63-4ba8-82d5-92088355780b",
                            Email = "psicologo@teste.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PSICOLOGO@TESTE.COM",
                            NormalizedUserName = "PSICOLOGO@TESTE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHw1LJ0uelZ2db8eyBE+jdcLGQvjjo0O7ahJaiawEPtY09CCsSsm6kHwum0PNbrzHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db30cb6b-8ed1-4cce-9d82-8239c55442a4",
                            TwoFactorEnabled = false,
                            UserName = "psicologo@teste.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b18c66e9-0260-466d-a789-21800f123457",
                            RoleId = "a18c66e9-0260-466d-a789-21800f123456"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EspecialidadePsicologo", b =>
                {
                    b.HasOne("Luminis.Models.Especialidade", null)
                        .WithMany()
                        .HasForeignKey("EspecialidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Luminis.Models.Psicologo", null)
                        .WithMany()
                        .HasForeignKey("PsicologosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
